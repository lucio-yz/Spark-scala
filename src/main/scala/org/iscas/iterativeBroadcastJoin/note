在数据倾斜的情况下，
log2是大表在千万级别，中等表在万级别的实验
log3是大表在亿级别，中等表在万级别的实验
log4是大表在千万级别，中等表在百万级别的实验
在数据均衡分布的情况下，
log5是大表在千万级别，中等表在万级别的实验
log6是大表在亿级别，中等表在万级别的实验


1.benchmark最好运行在集群上（最好5台机器以上），最好不要运行在一个JVM上，否则无法模拟出真实的生产环境和网路环境
事实上，当在2台机器的集群上实验时，iterativeBroadcastJoin算法慢于sortMergeJoin
当在8台机器的集群上实验时，iterativeBroadcastJoin算法快于sortMergeJoin
当集群数量越大时，sortMergeJoin越慢

2.iterativeBroadcastJoin每次都要dfWrite中间结果，是因为为了触发本次迭代的计算。这样可以生成多个执行计划，
同时在网络上broadcast本次迭代需要的中等规模表的部分。
如果改为cache，由于cache不是action，计算将不会在每次迭代触发，而是每个join只会生成一个执行计划，那么整个中等规模表
将同时在网络上传输

3.目前看起来，持久化是一个没有办法的办法，用来触发action。
也许可以通过alluxio来加速？